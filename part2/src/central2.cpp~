#include <iostream>
#include <boost/asio.hpp>
#include <boost/array.hpp>
#include <string>

using namespace boost::asio;
using namespace std;
using ip::udp;


class udpClient{
public:
    udpClient(boost::asio::io_service& io)
        : _io(io),
          _resolver(io),
          _socket(io)
    {}

    std::string queryServer(std::string addr, int port){
        udp::resolver::query query(udp::v4(),addr,std::to_string(port));
        udp::endpoint receiver = *_resolver.resolve(query);

        _socket.open(udp::v4());
        boost::array<char,1> send_buf = {{0}};

        _socket.send_to(buffer(send_buf),receiver);
        boost::array<char,128> recv_buf;
        udp::endpoint sender;
        size_t len = _socket.receive_from(buffer(recv_buf),sender);
        //std::cout.write(recv_buf.data(),len);
        return (std::string(recv_buf.data()));
    }

private:
    boost::asio::io_service& _io;
    udp::socket _socket;
    udp::resolver _resolver;
};


int main(int argc, char **argv)
{

   io_service io;
   udp::resolver resolver(io);

   const int NumberOfClients = 8;

   std::string addrs[NumberOfClients];
   addrs[0] = "192.168.27.202";
   addrs[1] = "192.168.27.204";
   addrs[2] = "192.168.27.203";
   addrs[3] = "192.168.27.206";
   addrs[4] = "192.168.27.205";
   addrs[5] = "192.168.27.207";
   addrs[6] = "192.168.27.208";
   addrs[7] = "192.168.27.209";
   //   addrs[8] = "192.168.27.201"; //professor computer

   int ports[NumberOfClients];
   ports[0]=17231;
   ports[1]=17232;
   ports[2]=17233;
   ports[3]=17234;
   ports[4]=17235;
   ports[5]=17236;
   ports[6]=17237;
   ports[7]=17238;

    udpClient w1(io);
        std::string resposta = "";
    resposta = w1.queryServer(addrs[7],ports[1]);
    std::cout << resposta << std::endl;
    

 /*  for(int i = 1; i++; i<NumberOfClients){
     getData(addrs[i],ports[i],resolver,io);
   } */
;

}
